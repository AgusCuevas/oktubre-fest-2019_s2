class Empresa {
	
	const profesionales = #{}
	var honorarioDeReferencia
	
	method setHonorarioDeReferencia(_honorarioDeReferencia) {
		honorarioDeReferencia = _honorarioDeReferencia
	}
	
	method agregarProfesionales(_profesionales) {
		profesionales.addAll(_profesionales)
	}
	
	method agregarProfesional(_profesional) {
		profesionales.add(_profesional)
	}
	
	method profesionalesCaros() {
		return profesionales.filter({p => p.honorariosPorHora() > honorarioDeReferencia })
	}
	
	method universidadesFormadoras() {
		return profesionales.map({p => p.universidad()}).asSet()
	}
	
	method profesionalMasBarato() {
		return profesionales.min({p => p.honorariosPorHora()})
	}
	
	method provinciaCubierta(_provincia) {
		return profesionales.any({p => p.provinciasDondePuedeTrabajar().contains(_provincia)})
	}
	
	method profesionalesPorUniversidad(_universidad) {
		return profesionales.count({p => p.universidad()==_universidad})
	}
	
	method profesionalMasBaratoQue(_provincia, _honorario) {
		return profesionales.any({p => 
			p.provinciasDondePuedeTrabajar().contains(_provincia) and
			p.honorariosPorHora() < _honorario  })	
	}
	
		method profesionalPocoAtractivo(_profesional) {
			return _profesional.provinciasDondePuedeTrabajar()
			.all({prov => profesionales
				.any({p => p.provinciasDondePuedeTrabajar().contains(prov) 
				and p.honorariosPorHora() < _profesional.honorariosPorHora()})
		})

	}
	
	method profesionalPocoAtractivo2(_profesional) {
		return _profesional.provinciasDondePuedeTrabajar().all({prov => 
			self.profesionalMasBaratoQue(prov, _profesional.honorariosPorHora())
		})
	}
	
}
